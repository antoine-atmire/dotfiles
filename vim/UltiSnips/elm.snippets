snippet start "elm starter template" b
module Main exposing (..)

import Html exposing (Html, button, div, h1, text)
import Html.Events exposing (onClick)


main : Program Never Model Msg
main =
    Html.program
        { init = initialModel |> thatsIt
        , view = view
        , update = update
        , subscriptions = subscriptions
        }


thatsIt : a -> ( a, Cmd b )
thatsIt model =
    ( model, Cmd.none )



-- MODEL


type alias Model =
    Int


initialModel : Model
initialModel =
    0



-- UPDATE


type Msg
    = Increment
    | Decrement


update : Msg -> Model -> ( Model, Cmd Msg )
update message model =
    case message of
        Increment ->
            (model + 1)
                |> thatsIt

        Decrement ->
            (model - 1)
                |> thatsIt



-- SUBSCRIPTIONS


subscriptions : a -> Sub Msg
subscriptions model =
    Sub.none



-- VIEW


view : Model -> Html Msg
view model =
    div []
        [ h1 [] [ text "heading 1" ]
        , button [ onClick Decrement ] [ text "-" ]
        , div [] [ text (toString model) ]
        , button [ onClick Increment ] [ text "+" ]
        ]
endsnippet

snippet -> "subcase" b
${1:value} ->
	${2:code}
endsnippet

snippet imp3 "import x as x exposing (x)" b
import ${2:package}.${1:x} as $1 exposing ($1)
endsnippet
